import reimport jsonimport timeimport asynciofrom typing import Dict, Any, Listfrom langgraph.graph import StateGraph, ENDfrom langchain_openai import ChatOpenAIfrom langchain.prompts import ChatPromptTemplatefrom langchain.schema import HumanMessage, SystemMessagefrom .advanced_chatbot_models import AdvancedChatbotStatefrom .api import fetch_quote, fetch_company_overview, fetch_rsi, fetch_macd, fetch_sma, fetch_news_sentimentclass AdvancedIntentClassifier:    def __init__(self):        self.llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.1)        self.prompt = ChatPromptTemplate.from_messages([            ("system", """당신은 최고급 금융 데이터 분석 전문가입니다. 사용자의 질문을 정확히 분석하여 다음과 같이 분류하세요:🎯 **분류 카테고리:**1. **stock_quote**: 주식 현재가, 시세, 가격 조회2. **company_overview**: 회사 정보, 개요, 재무지표3. **technical_analysis**: RSI, MACD, SMA 등 기술적 분석4. **market_sentiment**: 뉴스, 감정 분석, 시장 동향5. **portfolio_analysis**: 포트폴리오 분석, 비교🔍 **엔티티 추출:**- symbol: 주식 심볼 (대문자)- timeframe: daily, weekly, monthly- indicators: RSI, MACD, SMA 등- sentiment_keywords: 뉴스, 감정, 시장 등응답 형식 (JSON):{{    "intent": "분류된 인텐트",    "confidence": 0.95,    "entities": {{        "symbol": "AAPL",        "timeframe": "daily",        "indicators": ["RSI"]    }},    "reasoning": "분류 이유"}}"""),            ("human", "질문: {query}")        ])        def classify(self, state: AdvancedChatbotState) -> AdvancedChatbotState:        start_time = time.time()                try:            chain = self.prompt | self.llm            result = chain.invoke({"query": state["user_query"]})                        # JSON 파싱 시도            try:                parsed = json.loads(result.content)                intent = parsed.get("intent", "stock_quote")                confidence = parsed.get("confidence", 0.8)                entities = parsed.get("entities", {})            except json.JSONDecodeError:                # 폴백: 규칙 기반 분류                intent, confidence, entities = self._fallback_classification(state["user_query"])                        # 심볼이 없으면 추출 시도            if "symbol" not in entities:                entities["symbol"] = self._extract_symbol(state["user_query"])                        return {                **state,                "intent": intent,                "confidence": confidence,                "entities": entities,                "step_count": state["step_count"] + 1,                "processing_time": time.time() - start_time            }                    except Exception as e:            return {                **state,                "intent": "stock_quote",                "confidence": 0.5,                "entities": {"symbol": self._extract_symbol(state["user_query"])},                "error_context": f"분류 오류: {str(e)}",                "step_count": state["step_count"] + 1,                "processing_time": time.time() - start_time            }        def _fallback_classification(self, query: str) -> tuple:        """규칙 기반 폴백 분류"""        query_lower = query.lower()                if any(word in query_lower for word in ["현재가", "시세", "가격", "quote", "price"]):            return "stock_quote", 0.9, {}        elif any(word in query_lower for word in ["회사", "정보", "개요", "overview", "company"]):            return "company_overview", 0.9, {}        elif any(word in query_lower for word in ["rsi", "macd", "sma", "기술적", "지표"]):            return "technical_analysis", 0.9, {}        elif any(word in query_lower for word in ["뉴스", "감정", "sentiment", "시장"]):            return "market_sentiment", 0.9, {}        else:            return "stock_quote", 0.7, {}        def _extract_symbol(self, query: str) -> str:        symbols = re.findall(r'\b[A-Z]{2,5}\b', query.upper())        return symbols[0] if symbols else "AAPL"class AdvancedDataFetcher:    def __init__(self):        self.api_key = "384RIRA03BKUSJSV"        async def fetch_data(self, state: AdvancedChatbotState) -> AdvancedChatbotState:        start_time = time.time()        intent = state["intent"]        entities = state["entities"]        symbol = entities.get("symbol", "AAPL")                try:            if intent == "stock_quote":                data = await fetch_quote(symbol=symbol)                data_source = "AlphaVantage Global Quote"                            elif intent == "company_overview":                data = await fetch_company_overview(symbol=symbol)                data_source = "AlphaVantage Company Overview"                            elif intent == "technical_analysis":                indicators = entities.get("indicators", ["RSI"])                data = {}                for indicator in indicators:                    if indicator.upper() == "RSI":                        data["RSI"] = await fetch_rsi(                            symbol=symbol,                            interval="daily",                            time_period=14,                            series_type="close"                        )                    elif indicator.upper() == "MACD":                        data["MACD"] = await fetch_macd(                            symbol=symbol,                            interval="daily",                            series_type="close"                        )                    elif indicator.upper() == "SMA":                        data["SMA"] = await fetch_sma(                            symbol=symbol,                            interval="daily",                            time_period=20,                            series_type="close"                        )                data_source = "AlphaVantage Technical Indicators"                            elif intent == "market_sentiment":                data = await fetch_news_sentiment(tickers=symbol)                data_source = "AlphaVantage News Sentiment"                            else:                data = await fetch_quote(symbol=symbol)                data_source = "AlphaVantage Default"                        return {                **state,                "financial_data": data,                "data_source": data_source,                "step_count": state["step_count"] + 1,                "processing_time": state["processing_time"] + (time.time() - start_time)            }                    except Exception as e:            return {                **state,                "financial_data": {"error": str(e)},                "error_context": f"데이터 조회 오류: {str(e)}",                "step_count": state["step_count"] + 1,                "processing_time": state["processing_time"] + (time.time() - start_time)            }class AdvancedAnalysisAgent:    def __init__(self):        self.llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.3)        def format_number(self, value):        """숫자 포맷팅 (기존 고품질 포맷팅 유지)"""        try:            if value == 'N/A' or value is None or value == 'None':                return 'N/A'                        if isinstance(value, str):                clean_value = value.replace(',', '')                num = float(clean_value)            else:                num = float(value)                        if num == int(num):                num = int(num)                return f"{num:,}"            else:                return f"{num:,.2f}"                        except (ValueError, TypeError):            return str(value)        def analyze(self, state: AdvancedChatbotState) -> AdvancedChatbotState:        start_time = time.time()        data = state["financial_data"]        intent = state["intent"]        entities = state["entities"]        symbol = entities.get("symbol", "UNKNOWN")                if not data or "error" in data:            analysis = f"❌ {symbol} 데이터 조회에 실패했습니다: {data.get('error', '알 수 없는 오류')}"        else:            analysis = self._create_advanced_analysis(data, intent, symbol, entities)                return {            **state,            "analysis_result": analysis,            "step_count": state["step_count"] + 1,            "processing_time": state["processing_time"] + (time.time() - start_time)        }        def _create_advanced_analysis(self, data: Dict, intent: str, symbol: str, entities: Dict) -> str:        """고급 분석 생성 (기존 품질 유지 + AI 인사이트 추가)"""                if intent == "stock_quote" and "Global Quote" in data:            quote = data["Global Quote"]            price = quote.get("05. price", "N/A")            change = quote.get("09. change", "N/A")            change_percent = quote.get("10. change percent", "N/A")            volume = quote.get("06. volume", "N/A")            prev_close = quote.get("08. previous close", "N/A")            high = quote.get("03. high", "N/A")            low = quote.get("02. low", "N/A")            trading_day = quote.get("07. latest trading day", "N/A")                        # 거래량 포맷팅            formatted_volume = self.format_number(volume)                        # 변동률 분석            try:                change_num = float(change) if change != "N/A" else 0                change_percent_num = float(change_percent.replace('%', '')) if change_percent != "N/A" else 0                                if change_num > 5 or change_percent_num > 3:                    trend = "🚀 급등"                    insight = "강한 상승 모멘텀"                elif change_num > 0:                    trend = "📈 상승"                    insight = "긍정적 흐름"                elif change_num < -5 or change_percent_num < -3:                    trend = "📉 급락"                    insight = "강한 하락 압력"                elif change_num < 0:                    trend = "🔻 하락"                    insight = "약세 흐름"                else:                    trend = "📊 보합"                    insight = "횡보 패턴"                                    # 거래량 분석                try:                    volume_num = int(volume.replace(',', '')) if volume != "N/A" else 0                    if volume_num > 10000000:                        volume_insight = "🔥 고거래량"                    elif volume_num > 1000000:                        volume_insight = "📊 보통거래량"                    else:                        volume_insight = "🔇 저거래량"                except:                    volume_insight = "📊 거래량 정보 없음"                                except:                trend = "📊 변동없음"                insight = "데이터 분석 불가"                volume_insight = "거래량 분석 불가"                        return f"""📊 **{symbol} 실시간 주식 분석**💰 **가격 정보:**• 현재가: ${price}• 변동: {change} ({change_percent}) {trend}• 고가: ${high}• 저가: ${low}• 이전 종가: ${prev_close}📈 **거래 정보:**• 거래량: {formatted_volume} 주 {volume_insight}🧠 **AI 분석:**• 시장 상황: {insight}• 추천: {"매수 관심" if change_num > 2 else "관망" if change_num > -2 else "주의 필요"}⏰ **업데이트:** {trading_day}📊 **신뢰도:** {state.get('confidence', 0.8)*100:.0f}%"""        elif intent == "company_overview" and "Symbol" in data:            # 기존 고품질 회사 정보 포맷팅 유지            market_cap = data.get('MarketCapitalization', 'N/A')            if market_cap != 'N/A' and market_cap != 'None' and market_cap is not None:                try:                    mc_num = int(market_cap)                    if mc_num >= 1000000000000:  # 1조 이상                        market_cap = f"${mc_num/1000000000000:.1f}T"                    elif mc_num >= 1000000000:                        market_cap = f"${mc_num/1000000000:.1f}B"                    elif mc_num >= 1000000:                        market_cap = f"${mc_num/1000000:.1f}M"                    else:                        market_cap = f"${mc_num:,}"                except:                    market_cap = f"${market_cap}"                        # P/E 비율 분석            pe_ratio = data.get('PERatio', 'N/A')            pe_analysis = ""            investment_grade = "분석 필요"            if pe_ratio != 'N/A' and pe_ratio != 'None' and pe_ratio is not None:                try:                    pe_num = float(pe_ratio)                    if pe_num < 10:                        pe_analysis = " (💎 매우 저평가)"                        investment_grade = "💚 강력 매수"                    elif pe_num < 15:                        pe_analysis = " (💰 저평가 가능)"                        investment_grade = "💙 매수 검토"                    elif pe_num < 25:                        pe_analysis = " (📊 적정 수준)"                        investment_grade = "💛 관망"                    else:                        pe_analysis = " (⚠️ 고평가 위험)"                        investment_grade = "🧡 주의 필요"                except:                    pass                        # 배당수익률 분석            dividend_yield = data.get('DividendYield', 'N/A')            dividend_analysis = ""            if dividend_yield != 'N/A' and dividend_yield != 'None' and dividend_yield is not None:                try:                    div_num = float(dividend_yield)                    dividend_yield = f"{div_num*100:.2f}%"                    if div_num > 0.05:                        dividend_analysis = " (🎯 고배당)"                    elif div_num > 0.02:                        dividend_analysis = " (💰 배당 양호)"                    else:                        dividend_analysis = " (📊 낮은 배당)"                except:                    dividend_yield = f"{dividend_yield}%"            else:                dividend_yield = "없음"                        return f"""🏢 **{data.get('Name', symbol)} 심층 분석**🏭 **기본 정보:**• 업종: {data.get('Sector', 'N/A')}• 산업: {data.get('Industry', 'N/A')}• 국가: {data.get('Country', 'N/A')}• 통화: {data.get('Currency', 'N/A')}💹 **투자 지표:**• 시가총액: {market_cap}• P/E 비율: {pe_ratio}{pe_analysis}• PEG 비율: {data.get('PEGRatio', 'N/A')}• 배당수익률: {dividend_yield}{dividend_analysis}📊 **주가 정보:**• 52주 최고가: ${data.get('52WeekHigh', 'N/A')}• 52주 최저가: ${data.get('52WeekLow', 'N/A')}• 50일 이평: ${data.get('50DayMovingAverage', 'N/A')}• 200일 이평: ${data.get('200DayMovingAverage', 'N/A')}🧠 **AI 투자 등급:** {investment_grade}💼 **회사 개요:**{data.get('Description', 'N/A')[:250]}...📊 **분석 신뢰도:** {state.get('confidence', 0.8)*100:.0f}%"""        elif intent == "technical_analysis":            indicators_analysis = []            for indicator, indicator_data in data.items():                if indicator == "RSI" and f"Technical Analysis: {indicator}" in indicator_data:                    indicators_analysis.append(f"📈 RSI 지표 데이터 준비 완료")                elif indicator == "MACD":                    indicators_analysis.append(f"📊 MACD 지표 데이터 준비 완료")                elif indicator == "SMA":                    indicators_analysis.append(f"📉 SMA 이동평균 데이터 준비 완료")                        analysis_text = "\n".join(indicators_analysis) if indicators_analysis else "기술적 분석 데이터 준비 중..."                        return f"""📈 **{symbol} 기술적 분석**🎯 **요청된 지표:** {', '.join(entities.get('indicators', ['RSI']))}{analysis_text}🧠 **AI 분석:**• 기술적 지표를 통한 매매 신호 분석• 추세 변화 포착 및 지지/저항 레벨 확인• 모멘텀 분석을 통한 진입/청산 타이밍 제시📊 **분석 신뢰도:** {state.get('confidence', 0.8)*100:.0f}%"""        return f"✅ {symbol}에 대한 {intent} 분석이 완료되었습니다."def determine_routing(state: AdvancedChatbotState) -> str:    """지능적 라우팅"""    confidence = state.get("confidence", 0.5)        if confidence > 0.8:        return "fetch_data"    else:        return "clarify_intent"def clarify_intent(state: AdvancedChatbotState) -> AdvancedChatbotState:    """인텐트 명확화"""    return {        **state,        "analysis_result": f"""🤔 **질문을 더 명확히 해주세요**입력하신 내용: "{state['user_query']}"분석 신뢰도: {state.get('confidence', 0.5)*100:.0f}%💡 **추천 질문 형식:**• `NVDA 현재가` - 실시간 주가• `AAPL 회사 정보` - 기업 분석  • `TSLA RSI` - 기술적 분석• `MSFT 뉴스` - 시장 감정다시 질문해주세요! 🚀""",        "step_count": state["step_count"] + 1    }def generate_final_response(state: AdvancedChatbotState) -> AdvancedChatbotState:    """최종 응답 생성"""    analysis = state.get("analysis_result", "분석을 완료할 수 없습니다.")    processing_time = state.get("processing_time", 0)        # 처리 시간 추가    footer = f"\n\n⚡ **처리 시간:** {processing_time:.2f}초 | 📡 **데이터 출처:** {state.get('data_source', 'AlphaVantage')}"        return {        **state,        "formatted_response": analysis + footer,        "step_count": state["step_count"] + 1    }def create_advanced_chatbot_graph():    """고급 LangGraph 워크플로우"""        classifier = AdvancedIntentClassifier()    data_fetcher = AdvancedDataFetcher()    analyst = AdvancedAnalysisAgent()        workflow = StateGraph(AdvancedChatbotState)        # 노드 추가    workflow.add_node("classify_intent", classifier.classify)    workflow.add_node("fetch_data", data_fetcher.fetch_data)    workflow.add_node("analyze_data", analyst.analyze)    workflow.add_node("clarify_intent", clarify_intent)    workflow.add_node("generate_response", generate_final_response)        # 조건부 엣지    workflow.add_conditional_edges(        "classify_intent",        determine_routing,        {            "fetch_data": "fetch_data",            "clarify_intent": "clarify_intent"        }    )        workflow.add_edge("fetch_data", "analyze_data")    workflow.add_edge("analyze_data", "generate_response")    workflow.add_edge("clarify_intent", "generate_response")    workflow.add_edge("generate_response", END)        workflow.set_entry_point("classify_intent")        return workflow.compile()